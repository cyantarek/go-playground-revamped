// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package playground

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaygroundClient is the client API for Playground service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaygroundClient interface {
	Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PingResponse, error)
	FormatCode(ctx context.Context, in *FormatCodeRequest, opts ...grpc.CallOption) (*FormatCodeResponse, error)
	RunCode(ctx context.Context, in *RunCodeRequest, opts ...grpc.CallOption) (*RunCodeResponse, error)
	ShareCode(ctx context.Context, in *ShareCodeRequest, opts ...grpc.CallOption) (*ShareCodeResponse, error)
	GetCodeByShare(ctx context.Context, in *CodeByIDRequest, opts ...grpc.CallOption) (*GetCodeByShareResponse, error)
}

type playgroundClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaygroundClient(cc grpc.ClientConnInterface) PlaygroundClient {
	return &playgroundClient{cc}
}

func (c *playgroundClient) Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/playground.Playground/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundClient) FormatCode(ctx context.Context, in *FormatCodeRequest, opts ...grpc.CallOption) (*FormatCodeResponse, error) {
	out := new(FormatCodeResponse)
	err := c.cc.Invoke(ctx, "/playground.Playground/FormatCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundClient) RunCode(ctx context.Context, in *RunCodeRequest, opts ...grpc.CallOption) (*RunCodeResponse, error) {
	out := new(RunCodeResponse)
	err := c.cc.Invoke(ctx, "/playground.Playground/RunCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundClient) ShareCode(ctx context.Context, in *ShareCodeRequest, opts ...grpc.CallOption) (*ShareCodeResponse, error) {
	out := new(ShareCodeResponse)
	err := c.cc.Invoke(ctx, "/playground.Playground/ShareCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playgroundClient) GetCodeByShare(ctx context.Context, in *CodeByIDRequest, opts ...grpc.CallOption) (*GetCodeByShareResponse, error) {
	out := new(GetCodeByShareResponse)
	err := c.cc.Invoke(ctx, "/playground.Playground/GetCodeByShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaygroundServer is the server API for Playground service.
// All implementations must embed UnimplementedPlaygroundServer
// for forward compatibility
type PlaygroundServer interface {
	Ping(context.Context, *EmptyRequest) (*PingResponse, error)
	FormatCode(context.Context, *FormatCodeRequest) (*FormatCodeResponse, error)
	RunCode(context.Context, *RunCodeRequest) (*RunCodeResponse, error)
	ShareCode(context.Context, *ShareCodeRequest) (*ShareCodeResponse, error)
	GetCodeByShare(context.Context, *CodeByIDRequest) (*GetCodeByShareResponse, error)
	mustEmbedUnimplementedPlaygroundServer()
}

// UnimplementedPlaygroundServer must be embedded to have forward compatible implementations.
type UnimplementedPlaygroundServer struct {
}

func (UnimplementedPlaygroundServer) Ping(context.Context, *EmptyRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPlaygroundServer) FormatCode(context.Context, *FormatCodeRequest) (*FormatCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FormatCode not implemented")
}
func (UnimplementedPlaygroundServer) RunCode(context.Context, *RunCodeRequest) (*RunCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCode not implemented")
}
func (UnimplementedPlaygroundServer) ShareCode(context.Context, *ShareCodeRequest) (*ShareCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareCode not implemented")
}
func (UnimplementedPlaygroundServer) GetCodeByShare(context.Context, *CodeByIDRequest) (*GetCodeByShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeByShare not implemented")
}
func (UnimplementedPlaygroundServer) mustEmbedUnimplementedPlaygroundServer() {}

// UnsafePlaygroundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaygroundServer will
// result in compilation errors.
type UnsafePlaygroundServer interface {
	mustEmbedUnimplementedPlaygroundServer()
}

func RegisterPlaygroundServer(s grpc.ServiceRegistrar, srv PlaygroundServer) {
	s.RegisterService(&Playground_ServiceDesc, srv)
}

func _Playground_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground.Playground/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServer).Ping(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playground_FormatCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormatCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServer).FormatCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground.Playground/FormatCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServer).FormatCode(ctx, req.(*FormatCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playground_RunCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServer).RunCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground.Playground/RunCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServer).RunCode(ctx, req.(*RunCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playground_ShareCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServer).ShareCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground.Playground/ShareCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServer).ShareCode(ctx, req.(*ShareCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playground_GetCodeByShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaygroundServer).GetCodeByShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground.Playground/GetCodeByShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaygroundServer).GetCodeByShare(ctx, req.(*CodeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Playground_ServiceDesc is the grpc.ServiceDesc for Playground service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Playground_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playground.Playground",
	HandlerType: (*PlaygroundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Playground_Ping_Handler,
		},
		{
			MethodName: "FormatCode",
			Handler:    _Playground_FormatCode_Handler,
		},
		{
			MethodName: "RunCode",
			Handler:    _Playground_RunCode_Handler,
		},
		{
			MethodName: "ShareCode",
			Handler:    _Playground_ShareCode_Handler,
		},
		{
			MethodName: "GetCodeByShare",
			Handler:    _Playground_GetCodeByShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playground_service.proto",
}
